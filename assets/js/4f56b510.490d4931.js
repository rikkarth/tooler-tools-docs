"use strict";(self.webpackChunktooler_tools_docs=self.webpackChunktooler_tools_docs||[]).push([[421],{1745:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var l=t(5893),r=t(1151);const o={sidebar_position:1},i="XmlHandler",s={id:"usage/xmlhandler",title:"XmlHandler",description:"Provides methods for querying and manipulating XML documents using XPath expressions.",source:"@site/docs/usage/xmlhandler.md",sourceDirName:"usage",slug:"/usage/xmlhandler",permalink:"/usage/xmlhandler",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Usage",permalink:"/category/usage"},next:{title:"PropertiesLoader",permalink:"/usage/propertiesloader"}},d={},a=[{value:"API",id:"api",level:2},{value:"Xml Subject",id:"xml-subject",level:2},{value:"getStringFromXPath (String, Document)",id:"getstringfromxpath",level:2},{value:"Single Element",id:"single-element",level:3},{value:"<em>Expected Output</em>",id:"expected-output",level:4},{value:"Multiple Elements",id:"multiple-elements",level:3},{value:"<em>Expected Output</em>",id:"expected-output-1",level:4},{value:"Wrong/Missing/Null Element",id:"wrongmissingnull-element",level:3},{value:"<em>Expected Output</em>",id:"expected-output-2",level:4},{value:"getNodeListFromXPath (String, Document)",id:"getnodelistfromxpath",level:2},{value:"Extracting Defined Child Element NodeList From Parent Node",id:"extracting-defined-child-element-nodelist-from-parent-node",level:3},{value:"<em>Expected Output</em>",id:"expected-output-3",level:4},{value:"Wrong/Missing/Null Elements",id:"wrongmissingnull-elements",level:3},{value:"<em>Expected Output</em>",id:"expected-output-4",level:4},{value:"getNodeFromXPath (String, Document)",id:"getnodefromxpath",level:2},{value:"Normal Use Case",id:"normal-use-case",level:3},{value:"<em>Expected Output</em>",id:"expected-output-5",level:4},{value:"Why does element-group have 7 child nodes instead of 3?",id:"why-does-element-group-have-7-child-nodes-instead-of-3",level:4},{value:"Missing/Wrong/Null Values",id:"missingwrongnull-values",level:3},{value:"<em>Expected Output</em>",id:"expected-output-6",level:4},{value:"getNodeFromXPath (String, Document, boolean)",id:"getnodefromxpathOL",level:2},{value:"If &#39;null&#39; needs to be returned",id:"if-null-needs-to-be-returned",level:3},{value:"<em>Expected Output</em>",id:"expected-output-7",level:4},{value:"getOptionalDomFromFile(File)",id:"getoptionaldomfromfile",level:2},{value:"<em>Expected Output</em>",id:"expected-output-8",level:4}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"xmlhandler",children:"XmlHandler"}),"\n",(0,l.jsx)(n.p,{children:"Provides methods for querying and manipulating XML documents using XPath expressions."}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.mdxAdmonitionTitle,{children:["Check ",(0,l.jsx)("a",{href:"../javadoc/",target:"_blank",children:"JavaDoc"}),"  for detailed info"]})}),"\n",(0,l.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"String"})," ",(0,l.jsx)(n.a,{href:"#getstringfromxpath",children:"getStringFromXPath (String, Document)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"NodeList"})," ",(0,l.jsx)(n.a,{href:"#getnodelistfromxpath",children:"getNodeListFromXPath (String, Document)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Node"})," ",(0,l.jsx)(n.a,{href:"#getnodefromxpath",children:"getNodeFromXPath (String, Document)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Node"})," ",(0,l.jsx)(n.a,{href:"#getnodefromxpathOL",children:"getNodeFromXPath (String, Document, boolean)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Optional",(0,l.jsx)(n.code,{children:"<Document>"})]})," ",(0,l.jsx)(n.a,{href:"#getoptionaldomfromfile",children:"getOptionalDomFromFile (File file)"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"xml-subject",children:"Xml Subject"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\r\n<root xmlns="http://example.com/test">\r\n    <test-element>Test Value</test-element>\r\n    <empty-element></empty-element>\r\n    <self-closing/>\r\n    <element-group>\r\n        <nested-element>Item 1</nested-element>\r\n        <nested-element>Item 2</nested-element>\r\n        <nested-element>Item 3</nested-element>\r\n    </element-group>\r\n</root>\n'})}),"\n",(0,l.jsx)(n.h2,{id:"getstringfromxpath",children:"getStringFromXPath (String, Document)"}),"\n",(0,l.jsx)(n.h3,{id:"single-element",children:"Single Element"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        String textElement = XmlHandler.getStringFromXPath("/root/test-element/text()", doc);\r\n\r\n        System.out.println(textElement);\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"Test Value\n"})}),"\n",(0,l.jsx)(n.h3,{id:"multiple-elements",children:"Multiple Elements"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        String textElement = XmlHandler.getStringFromXPath("/root/nested-element/text()", doc);\r\n\r\n        String textElement_1 = XmlHandler.getStringFromXPath("/root/nested-element[1]/text()", doc);\r\n\r\n        String textElement_2 = XmlHandler.getStringFromXPath("/root/nested-element[2]/text()", doc);\r\n\r\n        String textElement_3 = XmlHandler.getStringFromXPath("/root/nested-element[3]/text()", doc);\r\n\r\n        System.out.println(textElement);\r\n        System.out.println(textElement_1);\r\n        System.out.println(textElement_2);\r\n        System.out.println(textElement_3);\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-1",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsxs)(n.p,{children:["Observe as the first item 'Item 1' is output since no position was provided on ",(0,l.jsx)(n.code,{children:"textElement"})," assignment, by default the first value found is returned."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"Item 1\r\nItem 1\r\nItem 2\r\nItem 3\n"})}),"\n",(0,l.jsx)(n.h3,{id:"wrongmissingnull-element",children:"Wrong/Missing/Null Element"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        String textElement = XmlHandler.getStringFromXPath("/path/to/missing/element/text()", doc);\r\n\r\n        System.out.println(textElement.isEmpty());\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-2",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"true\n"})}),"\n",(0,l.jsx)(n.h2,{id:"getnodelistfromxpath",children:"getNodeListFromXPath (String, Document)"}),"\n",(0,l.jsx)(n.h3,{id:"extracting-defined-child-element-nodelist-from-parent-node",children:"Extracting Defined Child Element NodeList From Parent Node"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        NodeList elementGroup = XmlHandler.getNodeListFromXPath("//element-group/nested-element/text()", doc);\r\n\r\n        System.out.println(elementGroup.getLength());\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-3",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"3\n"})}),"\n",(0,l.jsx)(n.h3,{id:"wrongmissingnull-elements",children:"Wrong/Missing/Null Elements"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        NodeList nullDocumentCase = XmlHandler.getNodeListFromXPath(COMPLIANT_X_PATH, null);\r\n        NodeList malformedXPathCase = XmlHandler.getNodeListFromXPath(MALFORMED_X_PATH, doc);\r\n        NodeList nullXPathCase = XmlHandler.getNodeListFromXPath(null, doc);\r\n\r\n        System.out.println(nullDocumentCase.getLength());\r\n        System.out.println(malformedXPathCase.getLength());\r\n        System.out.println(nullXPathCase.getLength());\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-4",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"#getNodeListFromXPath"})," will return an empty NodeList if any of the cases above is applied."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"0\r\n0\r\n0\n"})}),"\n",(0,l.jsx)(n.h2,{id:"getnodefromxpath",children:"getNodeFromXPath (String, Document)"}),"\n",(0,l.jsx)(n.h3,{id:"normal-use-case",children:"Normal Use Case"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        Node groupElement = XmlHandler.getNodeFromXPath("//element-group", doc);\r\n\r\n        System.out.println(groupElement.getNodeName());\r\n        System.out.println(groupElement.getChildNodes().getLength());\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-5",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"element-group\r\n7\n"})}),"\n",(0,l.jsx)(n.h4,{id:"why-does-element-group-have-7-child-nodes-instead-of-3",children:"Why does element-group have 7 child nodes instead of 3?"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"getOptionalDomFromFile"})," doesn't apply any transformation to the Document being parsed and we leave the responsibility of cleaning whitespaces or other node types to you."]}),"\n",(0,l.jsx)(n.h3,{id:"missingwrongnull-values",children:"Missing/Wrong/Null Values"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        Node groupElementMalformed = XmlHandler.getNodeFromXPath(MALFORMED_X_PATH, doc);\r\n        Node groupElementNullExpression = XmlHandler.getNodeFromXPath(null, doc);\r\n        Node groupElementNullDoc = XmlHandler.getNodeFromXPath(MALFORMED_X_PATH, null);\r\n\r\n        System.out.println(groupElement);\r\n        System.out.println(groupElement.getNodeName());\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-6",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.p,{children:"The returned Node is never null, but will provide several indications that it is a null Node that contains no information - basically, an empty Node."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"[null: null]\r\nnull\n"})}),"\n",(0,l.jsx)(n.h2,{id:"getnodefromxpathOL",children:"getNodeFromXPath (String, Document, boolean)"}),"\n",(0,l.jsx)(n.h3,{id:"if-null-needs-to-be-returned",children:"If 'null' needs to be returned"}),"\n",(0,l.jsxs)(n.p,{children:["A boolean flag 'true' or 'false' can be additionally added as a parameter. If true, will return ",(0,l.jsx)(n.code,{children:"null"})," if something goes wrong."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document doc = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        Node nullGroupElement = XmlHandler.getNodeFromXPath(MALFORMED_X_PATH, doc, true);\r\n\r\n        System.out.println(nullGroupElement == null ? "is null" : "not null");\r\n    }\r\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-7",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"is null\n"})}),"\n",(0,l.jsx)(n.h2,{id:"getoptionaldomfromfile",children:"getOptionalDomFromFile(File)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"import pt.codeforge.toolertools.xml.XmlHandler;\r\n\r\nclass TestClass {\r\n\r\n    @Test\r\n    void test() {\r\n        Document document = XmlHandler.getOptionalDomFromFile(new File(input)).orElseThrow(IllegalStateException::new);\r\n\r\n        System.out.println(document.getFirstChild().getNodeName());\r\n    }\r\n}\n"})}),"\n",(0,l.jsx)(n.h4,{id:"expected-output-8",children:(0,l.jsx)(n.em,{children:"Expected Output"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"root\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var l=t(7294);const r={},o=l.createContext(r);function i(e){const n=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);